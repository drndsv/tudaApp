import { useEffect, useState } from "react";
import { Card, Grid, Stack, Text } from "@mantine/core";
import {
  AppUserResponseDTO,
  EventControllerService,
  EventResponseDTO,
} from "../api/generated";

interface EventDetailsInfoProps {
  event: EventResponseDTO;
}

export default function EventDetailsInfo({ event }: EventDetailsInfoProps) {
  const [participantCount, setParticipantCount] = useState<number | null>(null);
  const [volunteerCount, setVolunteerCount] = useState<number | null>(null);
  const [contactPerson, setContactPerson] = useState<AppUserResponseDTO | null>(
    null
  );

  const participantLimit = event.participantsNumber ?? "";
  const volunteerLimit = event.volunteersNumber ?? "";

  useEffect(() => {
    if (!event.id) return;

    EventControllerService.getUserCountWithCertainRoleOnEvent(
      "PARTICIPANT",
      event.id
    ).then((res) => {
      if (!res.error && typeof res.result === "number") {
        setParticipantCount(res.result);
      } else {
        console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", res.errorMassage);
      }
    });

    EventControllerService.getUserCountWithCertainRoleOnEvent(
      "VOLUNTEER",
      event.id
    ).then((res) => {
      if (!res.error && typeof res.result === "number") {
        setVolunteerCount(res.result);
      } else {
        console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:", res.errorMassage);
      }
    });

    EventControllerService.getContactPersonOfEvent(event.id).then((res) => {
      if (!res.error && res.result) {
        setContactPerson(res.result);
      } else {
        console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞:", res.errorMassage);
      }
    });
  }, [event.id]);

  return (
    <Stack gap="md" h="100%">
      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      <Card
        shadow="sm"
        radius="xl"
        padding="md"
        bg="white"
        withBorder
        style={{ minHeight: 120 }}
      >
        <Text fw={600} mb="xs">
          –û–ø–∏—Å–∞–Ω–∏–µ
        </Text>
        <Text fz="sm">{event.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."}</Text>
      </Card>

      {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä—ã */}
      <Grid>
        <Grid.Col span={6}>
          <Card shadow="sm" radius="xl" padding="md" withBorder>
            <Text fw={600} mb="xs">
              –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            </Text>
            <Text fz="sm">
              {participantCount !== null
                ? `${participantCount}/${participantLimit}`
                : "–ó–∞–≥—Ä—É–∑–∫–∞..."}
            </Text>
          </Card>
        </Grid.Col>
        <Grid.Col span={6}>
          <Card shadow="sm" radius="xl" padding="md" withBorder>
            <Text fw={600} mb="xs">
              –í–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
            </Text>
            <Text fz="sm">
              {volunteerCount !== null
                ? `${volunteerCount}/${volunteerLimit}`
                : "–ó–∞–≥—Ä—É–∑–∫–∞..."}
            </Text>
          </Card>
        </Grid.Col>
      </Grid>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Grid>
        <Grid.Col span={6}>
          <Card shadow="sm" radius="xl" padding="md" withBorder h="100%">
            <Text fw={600} mb="xs">
              –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </Text>
            <Stack gap={4} fz="sm">
              <Text>
                üìÖ{" "}
                {event.date ? new Date(event.date).toLocaleDateString() : "‚Äî"}
              </Text>
              <Text>
                üïí{" "}
                {event.date
                  ? new Date(event.date).toLocaleTimeString([], {
                      hour: "2-digit",
                      minute: "2-digit",
                    })
                  : "‚Äî"}
              </Text>
              <Text>üìç {event.city || "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"}</Text>
              <Text>
                üè¢ {event.organization?.name || "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
              </Text>
            </Stack>
          </Card>
        </Grid.Col>

        {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ */}
        <Grid.Col span={6}>
          <Card shadow="sm" radius="xl" padding="md" withBorder h="100%">
            <Text fw={600} mb="xs">
              –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
            </Text>
            <Stack gap={4} fz="sm">
              <Text>üìû {event.organization?.phoneNumber || "–ù–µ —É–∫–∞–∑–∞–Ω"}</Text>
              <Text>
                üë§{" "}
                {contactPerson
                  ? `${contactPerson.lastName ?? ""} ${
                      contactPerson.name ?? ""
                    } ${contactPerson.patronymic ?? ""}`.trim()
                  : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
              </Text>
            </Stack>
          </Card>
        </Grid.Col>
      </Grid>
    </Stack>
  );
}
