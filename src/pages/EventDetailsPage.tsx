import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import {
  Box,
  Container,
  Grid,
  Image,
  Text,
  Title,
  Stack,
  Card,
  Button,
  rem,
  Center,
  Loader,
} from "@mantine/core";
import Header from "../components/Header";
import { EventResponseDTO } from "../api/generated/models/EventResponseDTO";
import { EventControllerService } from "../api/generated/services/EventControllerService";
import { useEventImage } from "../hooks/useEventImage";

export default function EventDetailsPage() {
  const { id } = useParams();
  const [event, setEvent] = useState<EventResponseDTO | null>(null);
  const [loading, setLoading] = useState(true);

  const [isParticipant, setIsParticipant] = useState(false);
  const [isVolunteerPending, setIsVolunteerPending] = useState(false);

  useEffect(() => {
    if (!id) return;

    const fetchEvent = async () => {
      try {
        const response = await EventControllerService.getEventById(Number(id));
        if (!response.error && response.result) {
          setEvent(response.result);
        } else {
          console.error("–û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:", response.errorMassage);
        }
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", e);
      } finally {
        setLoading(false);
      }
    };

    fetchEvent();
  }, [id]);

  const imageSrc = useEventImage(event?.photo);

  const handleJoin = () => {
    setIsParticipant(true);
    setIsVolunteerPending(false);
  };

  const handleVolunteer = () => {
    setIsVolunteerPending(true);
    setIsParticipant(false);
  };

  const handleCancel = () => {
    setIsParticipant(false);
    setIsVolunteerPending(false);
  };

  const getReadableStatus = (status?: string): string => {
    switch (status) {
      case "WILL":
        return "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è";
      case "PUBLISHED":
        return "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ";
      case "FINISHED":
        return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ";
      case "CANCELLED":
        return "–û—Ç–º–µ–Ω–µ–Ω–æ";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  if (loading) {
    return (
      <Box>
        <Header />
        <Container size="lg" py="xl">
          <Center>
            <Loader />
          </Center>
        </Container>
      </Box>
    );
  }

  if (!event) {
    return (
      <Box>
        <Header />
        <Container size="lg" py="xl">
          <Text>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</Text>
        </Container>
      </Box>
    );
  }

  const isPast = new Date(event.date || "") < new Date();

  return (
    <Box>
      <Header />
      <Container size="lg" py="xl">
        <Title order={2} mb="sm">
          {event.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}
        </Title>

        <Text fz="lg" fw={500} mb="xl" c="gray.7">
          –°—Ç–∞—Ç—É—Å: {getReadableStatus(event.eventStatus)}
        </Text>

        <Grid gutter="xl" align="stretch">
          <Grid.Col span={{ base: 12, md: 6 }} h="100%">
            <Stack h="100%" justify="space-between">
              <Box
                h={320}
                style={{
                  borderRadius: rem(16),
                  overflow: "hidden",
                  boxShadow: "8px 8px 16px #bcc4aa, -8px -8px 16px #ffffff",
                }}
              >
                {imageSrc ? (
                  <Image
                    src={imageSrc}
                    alt={event.title || "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"}
                    h="100%"
                    w="100%"
                    fit="cover"
                  />
                ) : (
                  <Center h="100%" bg="gray.0">
                    <Text c="gray.6">–ë–µ–∑ —Ñ–æ—Ç–æ</Text>
                  </Center>
                )}
              </Box>

              <Stack gap="sm">
                {isVolunteerPending && (
                  <Text fz="sm" c="gray.6">
                    –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ
                  </Text>
                )}

                {isParticipant && (
                  <Text fz="sm" c="gray.6">
                    –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
                  </Text>
                )}

                {!isParticipant && !isVolunteerPending && (
                  <>
                    <Button
                      fullWidth
                      color="green.10"
                      radius="xl"
                      disabled={isPast}
                      onClick={handleJoin}
                    >
                      –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
                    </Button>
                    <Button
                      fullWidth
                      color="green.10"
                      radius="xl"
                      disabled={isPast}
                      onClick={handleVolunteer}
                    >
                      –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ
                    </Button>
                  </>
                )}

                {(isParticipant || isVolunteerPending) && (
                  <Button
                    fullWidth
                    color="red"
                    radius="xl"
                    disabled={isPast}
                    onClick={handleCancel}
                  >
                    –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è
                  </Button>
                )}
              </Stack>
            </Stack>
          </Grid.Col>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
          <Grid.Col span={{ base: 12, md: 6 }} h="100%">
            <Stack gap="md" h="100%">
              <Card
                shadow="sm"
                radius="xl"
                padding="md"
                bg="white"
                withBorder
                style={{ minHeight: "120px" }}
              >
                <Text fw={600} mb="xs">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </Text>
                <Text fz="sm">{event.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."}</Text>
              </Card>

              <Grid>
                <Grid.Col span={6}>
                  <Card
                    shadow="sm"
                    radius="xl"
                    padding="md"
                    bg="white"
                    withBorder
                  >
                    <Text fw={600} mb="xs">
                      –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    </Text>
                    <Text fz="sm">{event.participantsNumber ?? 0}/200</Text>
                  </Card>
                </Grid.Col>
                <Grid.Col span={6}>
                  <Card
                    shadow="sm"
                    radius="xl"
                    padding="md"
                    bg="white"
                    withBorder
                  >
                    <Text fw={600} mb="xs">
                      –í–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
                    </Text>
                    <Text fz="sm">{event.volunteersNumber ?? 0}/100</Text>
                  </Card>
                </Grid.Col>
              </Grid>

              <Grid>
                <Grid.Col span={6}>
                  <Card
                    shadow="sm"
                    radius="xl"
                    padding="md"
                    bg="white"
                    withBorder
                    h="100%"
                  >
                    <Text fw={600} mb="xs">
                      –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    </Text>
                    <Stack gap={4} fz="sm">
                      <Text>
                        üìÖ{" "}
                        {event.date
                          ? new Date(event.date).toLocaleDateString()
                          : "‚Äî"}
                      </Text>
                      <Text>
                        üïí{" "}
                        {event.date
                          ? new Date(event.date).toLocaleTimeString([], {
                              hour: "2-digit",
                              minute: "2-digit",
                            })
                          : "‚Äî"}
                      </Text>
                      <Text>üìç {event.city || "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"}</Text>
                      <Text>
                        üè¢{" "}
                        {event.organization?.name || "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
                      </Text>
                    </Stack>
                  </Card>
                </Grid.Col>

                <Grid.Col span={6}>
                  <Card
                    shadow="sm"
                    radius="xl"
                    padding="md"
                    bg="white"
                    withBorder
                    h="100%"
                  >
                    <Text fw={600} mb="xs">
                      –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
                    </Text>
                    <Stack gap={4} fz="sm">
                      <Text>
                        üìû {event.organization?.phoneNumber || "–ù–µ —É–∫–∞–∑–∞–Ω"}
                      </Text>
                      <Text>üë§ ‚Äî</Text>
                      <Text>‚úâÔ∏è ‚Äî</Text>
                    </Stack>
                  </Card>
                </Grid.Col>
              </Grid>
            </Stack>
          </Grid.Col>
        </Grid>
      </Container>
    </Box>
  );
}
